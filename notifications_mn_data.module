<?php
/**
 * @file
 */

/**
 * Implementation of hook_notifications_templates().
 */
function notifications_mn_data_notifications_templates($op, $type = 'all', $language = NULL) {
  switch ($op) {
    case 'info':
      $info = array();
      if ($type == 'all' || $type == 'notifications-mn-data-stored-views') {
        $info['notifications-mn-data-stored-views'] = array(
          'module' => 'notifications_mn_data',
          'name' => t('Notifications for mn data + stored views'),
          'description' => t('.'),
          'fallback' => 'notifications-event',
        );
      }
      return $info;

    case 'parts':
      // @see function notifications_notifications_templates().
      switch ($type) {
        case 'notifications-mn-data-stored-views':
          return array(
            'subject' => t('Subject'),
            'header' => t('Header'),
            'main' => t('Content'),
            'footer' => t('Footer'),
          );
      }
      break;

    case 'defaults':
      switch ($type) {
        case 'notifications-mn-data-stored-views':
          return array(
            'subject' => t('[stored-views-title] Monitor: [site-date-d] [site-date-month] [site-date-yyyy]', array(), $language->language),
            'header' => t('<h1><a href="[stored-views-url]">[stored-views-title] Monitor: [site-date-d] [site-date-month] [site-date-yyyy]</a></h1>', array(), $language->language),
            'main' => t('[stored-views-content]', array(), $language->language),
            'footer' => array(
                t('This is an automatic message from [site-name]', array(), $language->language),
                t('To manage your subscriptions, browse to [subscriptions-manage]', array(), $language->language),
                t('You can unsubscribe at [unsubscribe-url]', array(), $language->language),
            ),
          );
      }
      break;
  }
}

/**
 * Implementation of hook_notifications().
 */
function notifications_mn_data_notifications($op) {
  switch ($op) {
    case 'event types':
      $types = array();

      // TODO: no use case yet.
      $types['mn_data-insert'] = array(
        'type' => 'mn_data',
        'action' => 'insert',
        'name' => t('MN Data - insert'),
        'description' => t('MN Data - insert'),
        'line' => '', // TODO: single line message for (maybe) digest.
        'digest' => array(),
        'template' => 'notifications-event', // TODO: ?
      );

      // Event for stored views.
      $types['mn_data-stored_views'] = array(
        'type' => 'mn_data',
        'action' => 'stored_views',
        'name' => t('MN Data - Stored Views'),
        'description' => t('MN Data - Stored Views'),
        'digest' => array(),
        'template' => 'notifications-mn-data-stored-views',
      );
      return $types;

    case 'event classes':
      return array();

    case 'event actions':
      return array();

    case 'subscription types':
      $types = array();

      // Subscribe to stored views.
      $types['stored_views_mn_data'] = array(
        'event_type' => 'mn_data',
        'title' => t('Feed display'),
        'description' => t('Filter new content with subscribed display/search/etc.'),
        'access' => 'subscribe to stored views',
        'fields' => array('stored_views_id'),
      );
      return $types;
  }
}

/**
 * Implementation of hook_notifications_event().
 */
function notifications_mn_data_notifications_event($op, $event, $account = NULL) {
  switch ($op) {
    case 'query':
      $query = array();

      switch ($event->typekey) {
        case 'mn_data-stored_views':
          $query[]['fields'] = array('stored_views_id' => notifications_stored_views_get_all_ids());
          break;
      }

      return $query;
  }
}

/**
 * Implementation of hook_data_insert().
 */
function notifications_mn_data_data_insert($record, $table) {
  if ($table != 'feeds_data_syndication' || empty($record['id'])) {
    return;
  }

  $event = array(
    'module' => 'notifications_mn_data',
    'oid' => $record['id'],
    'type' => 'mn_data',
    'params' => array('id' => $record['id'], 'feed_nid' => $record['feed_nid'], 'timestamp' => $record['timestamp']),
  );

  // TODO: no use case yet.
  $event['action'] = 'insert';
  notifications_event($event);

  // Event for stored views.
  $event['action'] = 'stored_views';
  notifications_event($event);
}
